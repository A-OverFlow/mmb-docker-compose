services :
  mysql-member:
    image: mysql:latest
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root1234
      TZ: Asia/Seoul
    ports:
      - 13306:13306
    volumes:
      - ./db/mysql/member/data:/var/lib/mysql
    platform: linux/x86_64
    networks:
      - db-net

  mysql-question:
    image: mysql:latest
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root1234
      TZ: Asia/Seoul
    ports:
      - 3306:3306
    volumes:
      - ./db/mysql/question/data:/var/lib/mysql
    platform: linux/x86_64
    networks:
      - db-net

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    volumes:
      - ./redis/data:/data
      - ./redis/conf/redis.conf:/usr/local/conf/redis.conf
    labels:
      - "name=redis"
      - "mode=standalone"
    command: redis-server /usr/local/conf/redis.conf
    networks:
      - db-net

  member-service:
    image: myeongseob91/member-service:dev
    container_name: member-service
    restart: unless-stopped
    depends_on:
      - mysql
      - redis
    ports:
      - "${MEMBER_SERVICE_PORT}:${MEMBER_SERVICE_PORT}"
    command:
      - java -jar /app/member-service.jar
    environment:
      APPLICATION_PORT: ${MEMBER_SERVICE_PORT}
      DATASOURCE_URL: ${DATASOURCE_URL}
      DATASOURCE_USERNAME: ${DATASOURCE_USERNAME}
      DATASOURCE_PASSWORD: ${DATASOURCE_PASSWORD}
      REDIS_URL: ${REDIS_URL}
      REDIS_PORT: ${REDIS_PORT}
      SECRET_KEY: ${SECRET_KEY}
      REFRESH_TOKEN_EXPIRATION: ${REFRESH_TOKEN_EXPIRATION}
      ACCESS_TOKEN_EXPIRATION: ${ACCESS_TOKEN_EXPIRATION}
      spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.MySQLDialect
      spring.jpa.hibernate.ddl-auto: create
    networks:
      - fe-net
      - be-net
      - db-net

  question-service:
    image: myeongseob91/question-service:dev
    container_name: question-service
    restart: unless-stopped
    depends_on:
      - mysql
      - redis
      - member-service
    ports:
      - "${QUESTION_SERVICE_PORT}:${QUESTION_SERVICE_PORT}"
    environment:
      APPLICATION_PORT: ${QUESTION_SERVICE_PORT}
      DATASOURCE_URL: ${DATASOURCE_URL}
      DATASOURCE_USERNAME: ${DATASOURCE_USERNAME}
      DATASOURCE_PASSWORD: ${DATASOURCE_PASSWORD}
    command:
      - java -jar /app/member-service.jar
    networks:
      - fe-net
      - be-net
      - db-net

  gateway:
    image: myeongseob91/mmb-apigateway:latest
    container_name: mmb-apigateway
    restart: unless-stopped
    depends_on:
      - member-service
    command: [ "java", "-jar", "application.jar", "--spring.profiles.active=${APIGATEWAY_PROFILE}" ]
    ports:
      - 443:8443
    environment:
      - APPLICATION_PORT=${APPLICATION_PORT}
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt:ro
    networks:
      - fe-net
      - mgt-net

  mmb-frontend:
    image: myeongseob91/mmb-frontend:latest
    container_name: mmb-frontend
    restart: unless-stopped
    depends_on:
      - gateway
    ports:
      - "80:80"
    volumes:
      - ${NGINX_CONF_PATH}:/etc/nginx/nginx.conf
    command: [ "nginx", "-g", "daemon off;" ]
    networks:
      - fe-net

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - mgt-net
      - be-net

  process-exporter:
    image: ncabatoff/process-exporter:latest
    container_name: process-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - ./process-exporter.yml:/etc/process-exporter/config.yml:ro
      - /etc:/host/etc:ro
    command:
      - "--procfs=/host/proc"
      - "--config.path=/etc/process-exporter/config.yml"
    ports:
      - "9256:9256"
    networks:
      - mgt-net
      - be-net

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    depends_on:
      - node-exporter
      - process-exporter
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - mgt-net

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      - GF_SERVER_ROOT_URL=https://localhost:3000/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - ./grafana.ini:/etc/grafana/grafana.ini:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
       - mgt-net

volumes:
  grafana_data:
    external: true
  prometheus_data:

networks:
  fe-net:
    driver: bridge
  be-net:
    driver: bridge
  db-net:
    driver: bridge
  mgt-net:
    driver: bridge