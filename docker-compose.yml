services :
  mmb-member-mysql:
    image: mysql:latest
    container_name: mmb-member-mysql
    restart: no
    environment:
      MYSQL_ROOT_PASSWORD: root1234
      TZ: Asia/Seoul
    ports:
      - 13306:3306
    volumes:
      - ./db/mysql/member/data:/var/lib/mysql
    platform: linux/x86_64
    networks:
      - db-net

  mmb-question-mysql:
    image: mysql:latest
    container_name: mmb-question-mysql
    restart: no
    environment:
      MYSQL_ROOT_PASSWORD: root1234
      MYSQL_DATABASE: aoverflow
      TZ: Asia/Seoul
    ports:
      - 3306:3306
    volumes:
      - ./db/mysql/question/data:/var/lib/mysql
    platform: linux/x86_64
    networks:
      - db-net

  mmb-redis:
    image: redis:latest
    container_name: mmb-redis
    restart: no
    ports:
      - 6379:6379
    volumes:
      - ./redis/data:/data
      - ./redis/conf/redis.conf:/usr/local/conf/redis.conf
    labels:
      - "name=redis"
      - "mode=standalone"
    command: redis-server /usr/local/conf/redis.conf
    networks:
      - db-net

  mmb-member-service:
    image: mumulbo/member-service:${ENV_PROFILE}
    container_name: mmb-member-service
    restart: no
    depends_on:
      - mmb-member-mysql
      - mmb-redis
    ports:
      - "${MEMBER_SERVICE_PORT}:${MEMBER_SERVICE_PORT}"
    command:
      - java -jar /app/member-service.jar
    environment:
      APPLICATION_NAME: ${APPLICATION_NAME}
      APPLICATION_PORT: ${MEMBER_SERVICE_PORT}
      DATASOURCE_URL: ${MEMBER_DATASOURCE_URL}
      DATASOURCE_USERNAME: ${DATASOURCE_USERNAME}
      DATASOURCE_PASSWORD: ${DATASOURCE_PASSWORD}
      REDIS_URL: ${REDIS_URL}
      REDIS_PORT: ${REDIS_PORT}
      SECRET_KEY: ${SECRET_KEY}
      REFRESH_TOKEN_EXPIRATION: ${REFRESH_TOKEN_EXPIRATION}
      ACCESS_TOKEN_EXPIRATION: ${ACCESS_TOKEN_EXPIRATION}
      spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.MySQLDialect
      #spring.jpa.hibernate.ddl-auto: create
    networks:
      - fe-net
      - be-net
      - db-net

  mmb-auth-service:
    image: mumulbo/auth-service:${ENV_PROFILE}
    container_name: mmb-auth-service
    restart: no
    depends_on:
      - mmb-redis
      - mmb-member-service
      - mmb-member-mysql
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
    command:
      - java -jar /app/auth-service.jar
    environment:
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
      AUTH_SERVICE_NAME: ${AUTH_SERVICE_NAME}
      AUTH_SERVICE_HOST: ${AUTH_SERVICE_HOST}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      MEMBER_SERVICE_HOST: ${MEMBER_SERVICE_HOST}
      MEMBER_SERVICE_PORT: ${MEMBER_SERVICE_PORT}
      ACCESS_TOKEN_EXPIRATION: ${ACCESS_TOKEN_EXPIRATION}
      REFRESH_TOKEN_EXPIRATION: ${REFRESH_TOKEN_EXPIRATION}
      REDIS_URL: ${REDIS_URL}
      REDIS_PORT: ${REDIS_PORT}
      SECRET_KEY: ${SECRET_KEY}
    networks:
      - fe-net
      - be-net
      - db-net

  mmb-question-service:
    image: mumulbo/question-service:${ENV_PROFILE}
    container_name: mmb-question-service
    restart: no
    depends_on:
      - mmb-question-mysql
      - mmb-redis
      - mmb-member-service
    ports:
      - "${QUESTION_SERVICE_PORT}:${QUESTION_SERVICE_PORT}"
    environment:
      QUESTION_SERVICE_PORT: ${QUESTION_SERVICE_PORT}
      QUESTION_SERVICE_NAME: ${QUESTION_SERVICE_NAME}
      DATASOURCE_URL: ${QUESTION_DATASOURCE_URL}
      DATASOURCE_USERNAME: ${DATASOURCE_USERNAME}
      DATASOURCE_PASSWORD: ${DATASOURCE_PASSWORD}
      spring.datasource.url: jdbc:mysql://172.31.32.196:3306/aoverflow?serverTimezone=Asia/Seoul
      spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.MySQLDialect
      #spring.jpa.hibernate.ddl-auto: create
    command:
      - java -jar /app/member-service.jar
    networks:
      - fe-net
      - be-net
      - db-net

  mmb-apigateway:
    image: mumulbo/apigateway:${ENV_PROFILE}
    restart: no
    container_name: mmb-apigateway
    depends_on:
      - mmb-member-service
    command: [ "java", "-jar", "application.jar", "--spring.profiles.active=${ENV_PROFILE}" ]
    ports:
      - "${APPLICATION_PORT}:${APPLICATION_PORT}"
    environment:
      APPLICATION_PORT: ${APPLICATION_PORT}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      MEMBER_SERVICE_PORT: ${MEMBER_SERVICE_PORT}
      QUESTION_SERVICE_PORT: ${QUESTION_SERVICE_PORT}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt:ro
    networks:
      - fe-net
      - be-net
      - mgt-net

  mmb-frontend:
    image: mumulbo/mmb-frontend:${ENV_PROFILE}
    container_name: mmb-frontend
    restart: no
    depends_on:
      - mmb-apigateway
    ports:
      - "80:80"
    volumes:
      - ${NGINX_CONF_PATH}:/etc/nginx/nginx.conf
    command: [ "nginx", "-g", "daemon off;" ]
    networks:
      - fe-net

  mmb-node-exporter:
    image: prom/node-exporter
    container_name: mmb-node-exporter
    restart: no
    ports:
      - "9100:9100"
    networks:
      - mgt-net
      - be-net

  mmb-process-exporter:
    image: ncabatoff/process-exporter:latest
    container_name: mmb-process-exporter
    restart: no
    volumes:
      - /proc:/host/proc:ro
      - ./process-exporter.yml:/etc/process-exporter/config.yml:ro
      - /etc:/host/etc:ro
    command:
      - "--procfs=/host/proc"
      - "--config.path=/etc/process-exporter/config.yml"
    ports:
      - "9256:9256"
    networks:
      - mgt-net
      - be-net

  mmb-prometheus:
    image: prom/prometheus
    container_name: mmb-prometheus
    restart: no
    depends_on:
      - mmb-node-exporter
      - mmb-process-exporter
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - mgt-net

  mmb-grafana:
    image: grafana/grafana
    container_name: mmb-grafana
    restart: no
    depends_on:
      - mmb-prometheus
    environment:
      - GF_SERVER_ROOT_URL=https://localhost:3000/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - ./grafana.ini:/etc/grafana/grafana.ini:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - mgt-net

volumes:
  grafana_data:
    external: true
  prometheus_data:

networks:
  fe-net:
    driver: bridge
  be-net:
    driver: bridge
  db-net:
    driver: bridge
  mgt-net:
    driver: bridge